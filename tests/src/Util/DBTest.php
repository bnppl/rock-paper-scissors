<?php

namespace Util;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-04 at 00:03:53.
 */
class DBTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DB
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object =  DB::createInstance('sqlite::memory:');
        
        
        $sql = 'DROP TABLE IF EXISTS `game`';
        $this->object->query($sql);
        
        $sql = 'CREATE TABLE `game` (
                `id` INTEGER PRIMARY KEY AUTOINCREMENT,
                `player1` varchar(50) DEFAULT NULL,
                `player1Choice` varchar(10) DEFAULT NULL,
                `player2` varchar(50) DEFAULT NULL,
                `player2Choice` varchar(10) DEFAULT NULL,
                `gameHash` varchar(16) DEFAULT NULL
                
              )';
        $this->object->query($sql);
        $sql = "INSERT INTO `game` (`id`, `player1`, `player1Choice`, `player2`, `player2Choice`, `gameHash`)
                VALUES
                (1, 'Ben', 'Rock', 'Simon', 'Scissors', 'hash');";
        $this->object->query($sql);
        $sql = "INSERT INTO `game` (`id`, `player1`, `player1Choice`, `player2`, `player2Choice`, `gameHash`)
                VALUES
                (2, 'Rob', 'Paper', 'Paul', 'Scissors', 'hash2');";
        $this->object->query($sql);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Util\DB::__construct
     * @covers Util\DB::createInstance
     */
    public function testCreateInstance() {
        $object = DB::createInstance('sqlite::memory:');
        $this->assertAttributeInstanceOf('\PDO', 'pdo', $object);
        
    }
    
    /**
     * @covers Util\DB::__construct
     * @covers Util\DB::createInstance
     */
    public function testGetInstance() {
        $object = DB::getInstance();
        $this->assertAttributeInstanceOf('\PDO', 'pdo', $object);
        
    }

    /**
     * @covers Util\DB::fetchAll
     * @todo   Implement testFetchAll().
     */
    public function testFetchAll() {
        $sql = 'SELECT * FROM game';
        $result = $this->object->fetchAll($sql);
        $this->assertCount(2, $result);
    }

    /**
     * @covers Util\DB::query
     * @todo   Implement testQuery().
     */
    public function testQuery() {
       $sql = 'SELECT * FROM game WHERE game.id = ?';
       $params = array(1);
       $result = $this->object->query($sql, $params);
       $this->assertInstanceOf('\PDOStatement', $result);
       $this->assertEquals(1, count($result->fetchAll()));
    }

    /**
     * @covers Util\DB::fetchOne
     * @todo   Implement testFetchOne().
     */
    public function testFetchOne() {
        $sql = 'SELECT * FROM game';
        $result = $this->object->fetchOne($sql);
        $this->assertEquals(1, $result['id']);
        
    }
    /**
     * @covers Util\DB::getLastInsertID
     * @todo   Implement testFetchOne().
     */
    public function testGetLastInsertID() {
        $result = $this->object->getLastInsertID();
        $this->assertEquals(2, $result);
        
    }

}
