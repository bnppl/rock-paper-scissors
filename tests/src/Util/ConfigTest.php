<?php

namespace Util;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-03 at 23:17:23.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Config
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $test_params = array();
        $test_params['foo'] = 'bar';
        
        $this->object = new Config($test_params);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Util\Config::loadFromPHPFile
     * @covers Util\Config::__construct
     * @todo   Implement testLoadFromPHPFile().
     */
    public function testLoadFromPHPFile() {
        $test_config_path = DOCUMENT_ROOT.'tests/fixtures/config_test.php';
        
        $config = Config::loadFromPHPFile($test_config_path);
        
        $this->assertAttributeContains('value', 'parameters', $config);
        
        $test_config_path = 'path/to/nowhere/';
        
        try{
           $config = Config::loadFromPHPFile($test_config_path);    
        }
        catch(\Exception $e){
            $this->assertEquals('No config file found: path/to/nowhere/', $e->getMessage());
        }
        
        $test_config_path = DOCUMENT_ROOT.'tests/fixtures/config_test_fail.php';
        
        try{
           $config = Config::loadFromPHPFile($test_config_path);    
        }
        catch(\Exception $e){
            $this->assertEquals('Config file must return an array: '.$test_config_path, $e->getMessage());
        }
        
        
        
        
        
    }

    /**
     * @covers Util\Config::get
     * @todo   Implement testGet().
     */
    public function testGet() {
       $this->assertEquals('bar', $this->object->get('foo'));
       $this->assertFalse($this->object->get('empty'));
    }

}
