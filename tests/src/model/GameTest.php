<?php

namespace Model;
use Util\DB as DB;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-04 at 03:55:22.
 */
class GameTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Game
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $db = DB::createInstance('sqlite::memory:');
        $sql = 'DROP TABLE IF EXISTS `game`';
        $db->query($sql);
        
        $sql = 'CREATE TABLE `game` (
                `id` INTEGER PRIMARY KEY AUTOINCREMENT,
                `player1` varchar(50) DEFAULT NULL,
                `player1Choice` varchar(10) DEFAULT NULL,
                `player2` varchar(50) DEFAULT NULL,
                `player2Choice` varchar(10) DEFAULT NULL,
                `gameHash` varchar(16) DEFAULT NULL
                
              )';
        $db->query($sql);
        $sql = "INSERT INTO `game` (`id`, `player1`, `player1Choice`, `player2`, `player2Choice`, `gameHash`)
                VALUES
                (1, 'Ben', 'Rock', 'Simon', '', 'hash');";
        $db->query($sql);
        

        $this->object = new Game;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Model\Game::playComputer
     * @todo   Implement testPlayComputer().
     */
    public function testPlayComputer() {
        $choice = new Choice('Rock');
        $result = $this->object->playComputer($choice, 'Ben');
        
        $this->assertContains('win', $result);
    }

    /**
     * @covers Model\Game::playFriend
     * @todo   Implement testPlayFriend().
     */
    public function testPlayFriend() {
        $choice = new Choice('Rock');
        $result = $this->object->playFriend($choice, 'testName', 'Paul');
        $this->assertArrayHasKey('id', $result);
        $this->assertArrayHasKey('hash', $result);
        
        
    }

    /**
     * @covers Model\Game::retrieveGame
     * @todo   Implement testRetrieveGame().
     */
    public function testRetrieveGame() {
        $result = $this->object->retrieveGame(1, 'hash');
        
        $this->assertEquals('Ben', $result['player1']);
        
        $result = $this->object->retrieveGame(2, 'hash');
        
        $this->assertFalse($result);
    }

    /**
     * @covers Model\Game::completeChallenge
     * @covers Model\Game::getResult
     * @todo   Implement testCompleteChallenge().
     */
    public function testCompleteChallenge() {
        
        $choice = new Choice('Rock');
        
        $this->object->completeChallenge($choice, 1, 'hash');
        
        $result = $this->object->getResult(1, 'hash');
        
        $this->assertContains('draw', $result);
        
    }

    /**
     * @covers Model\Game::getResult
     * @todo   Implement testCompleteChallenge().
     */
    public function testGetResult() {
        
        $choice = new Choice('Rock');
        
        $this->object->completeChallenge($choice, 1, 'hash');
        
        $result = $this->object->getResult(1, 'hash');
        
        
        $this->assertContains('draw', $result);
        
    }

}
