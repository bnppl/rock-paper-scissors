<?php

namespace Model;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-04 at 03:31:54.
 */
class ChoiceTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Choice
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Choice('rock');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Model\Choice::getWeapon
     * @todo   Implement testGetWeapon().
     */
    public function testGetWeapon() {
        
       $this->assertEquals('rock', $this->object->getWeapon());
    }

    /**
     * @covers Model\Choice::__construct
     * @todo   Implement testCompare().
     */
    public function testConstruct() {
        $choice = new Choice();
        $this->assertInstanceOf('Model\Choice', $choice);
        
        $choice = new Choice('scissors');
        $this->assertInstanceOf('Model\Choice', $choice);
        
        try{
            $choice = new Choice('fail');
        }
        catch(\Exception $e){
            $this->assertEquals($e->getMessage(), 'Invalid weapon choice');

        }
        
    }

    /**
     * @covers Model\Choice::compare
     * @todo   Implement testCompare().
     */
    public function testCompare() {
        $choice1 = new Choice('rock');
        $choice2 = new Choice('rock');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 0);
        
        $choice1 = new Choice('rock');
        $choice2 = new Choice('paper');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, -1);
        
        $choice1 = new Choice('rock');
        $choice2 = new Choice('scissors');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 1);
        
        $choice1 = new Choice('paper');
        $choice2 = new Choice('rock');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 1);
        
        $choice1 = new Choice('paper');
        $choice2 = new Choice('paper');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 0);
        
        $choice1 = new Choice('paper');
        $choice2 = new Choice('scissors');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, -1);
        
        $choice1 = new Choice('scissors');
        $choice2 = new Choice('rock');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, -1);
        
        $choice1 = new Choice('scissors');
        $choice2 = new Choice('paper');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 1);
        
        $choice1 = new Choice('scissors');
        $choice2 = new Choice('scissors');
        
        $result = $choice1->compare($choice2);
        $this->assertEquals($result, 0);
    }

}
